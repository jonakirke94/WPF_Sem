//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WPF_SmartList.ListService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Category", Namespace="http://schemas.datacontract.org/2004/07/Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Category : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DefaultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<WPF_SmartList.ListService.Item> ItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WPF_SmartList.ListService.User UserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Default {
            get {
                return this.DefaultField;
            }
            set {
                if ((this.DefaultField.Equals(value) != true)) {
                    this.DefaultField = value;
                    this.RaisePropertyChanged("Default");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<WPF_SmartList.ListService.Item> Items {
            get {
                return this.ItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemsField, value) != true)) {
                    this.ItemsField = value;
                    this.RaisePropertyChanged("Items");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WPF_SmartList.ListService.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccessTokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WPF_SmartList.ListService.Address AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<WPF_SmartList.ListService.Category> CategoriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<WPF_SmartList.ListService.Invite> InvitesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResetTokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<WPF_SmartList.ListService.UserList> SharedListsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<WPF_SmartList.ListService.ShoppingList> ShoppingListsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccessToken {
            get {
                return this.AccessTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessTokenField, value) != true)) {
                    this.AccessTokenField = value;
                    this.RaisePropertyChanged("AccessToken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WPF_SmartList.ListService.Address Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<WPF_SmartList.ListService.Category> Categories {
            get {
                return this.CategoriesField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoriesField, value) != true)) {
                    this.CategoriesField = value;
                    this.RaisePropertyChanged("Categories");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<WPF_SmartList.ListService.Invite> Invites {
            get {
                return this.InvitesField;
            }
            set {
                if ((object.ReferenceEquals(this.InvitesField, value) != true)) {
                    this.InvitesField = value;
                    this.RaisePropertyChanged("Invites");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResetToken {
            get {
                return this.ResetTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.ResetTokenField, value) != true)) {
                    this.ResetTokenField = value;
                    this.RaisePropertyChanged("ResetToken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<WPF_SmartList.ListService.UserList> SharedLists {
            get {
                return this.SharedListsField;
            }
            set {
                if ((object.ReferenceEquals(this.SharedListsField, value) != true)) {
                    this.SharedListsField = value;
                    this.RaisePropertyChanged("SharedLists");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<WPF_SmartList.ListService.ShoppingList> ShoppingLists {
            get {
                return this.ShoppingListsField;
            }
            set {
                if ((object.ReferenceEquals(this.ShoppingListsField, value) != true)) {
                    this.ShoppingListsField = value;
                    this.RaisePropertyChanged("ShoppingLists");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Item", Namespace="http://schemas.datacontract.org/2004/07/Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Item : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WPF_SmartList.ListService.Category CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<WPF_SmartList.ListService.ItemChange> ChangesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DeadlineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WPF_SmartList.ListService.Unit UnitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UnitIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WPF_SmartList.ListService.Category Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<WPF_SmartList.ListService.ItemChange> Changes {
            get {
                return this.ChangesField;
            }
            set {
                if ((object.ReferenceEquals(this.ChangesField, value) != true)) {
                    this.ChangesField = value;
                    this.RaisePropertyChanged("Changes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Deadline {
            get {
                return this.DeadlineField;
            }
            set {
                if ((this.DeadlineField.Equals(value) != true)) {
                    this.DeadlineField = value;
                    this.RaisePropertyChanged("Deadline");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WPF_SmartList.ListService.Unit Unit {
            get {
                return this.UnitField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitField, value) != true)) {
                    this.UnitField = value;
                    this.RaisePropertyChanged("Unit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UnitId {
            get {
                return this.UnitIdField;
            }
            set {
                if ((this.UnitIdField.Equals(value) != true)) {
                    this.UnitIdField = value;
                    this.RaisePropertyChanged("UnitId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Unit", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Unit : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int Idk__BackingFieldField;
        
        private System.Collections.Generic.List<WPF_SmartList.ListService.Item> Itemsk__BackingFieldField;
        
        private string Namek__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Id>k__BackingField", IsRequired=true)]
        public int Idk__BackingField {
            get {
                return this.Idk__BackingFieldField;
            }
            set {
                if ((this.Idk__BackingFieldField.Equals(value) != true)) {
                    this.Idk__BackingFieldField = value;
                    this.RaisePropertyChanged("Idk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Items>k__BackingField", IsRequired=true)]
        public System.Collections.Generic.List<WPF_SmartList.ListService.Item> Itemsk__BackingField {
            get {
                return this.Itemsk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Itemsk__BackingFieldField, value) != true)) {
                    this.Itemsk__BackingFieldField = value;
                    this.RaisePropertyChanged("Itemsk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Name>k__BackingField", IsRequired=true)]
        public string Namek__BackingField {
            get {
                return this.Namek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Namek__BackingFieldField, value) != true)) {
                    this.Namek__BackingFieldField = value;
                    this.RaisePropertyChanged("Namek__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ItemChange", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class ItemChange : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private WPF_SmartList.ListService.Action Actionk__BackingFieldField;
        
        private System.DateTime Datek__BackingFieldField;
        
        private int Idk__BackingFieldField;
        
        private int UserIdk__BackingFieldField;
        
        private string UserNamek__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Action>k__BackingField", IsRequired=true)]
        public WPF_SmartList.ListService.Action Actionk__BackingField {
            get {
                return this.Actionk__BackingFieldField;
            }
            set {
                if ((this.Actionk__BackingFieldField.Equals(value) != true)) {
                    this.Actionk__BackingFieldField = value;
                    this.RaisePropertyChanged("Actionk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Date>k__BackingField", IsRequired=true)]
        public System.DateTime Datek__BackingField {
            get {
                return this.Datek__BackingFieldField;
            }
            set {
                if ((this.Datek__BackingFieldField.Equals(value) != true)) {
                    this.Datek__BackingFieldField = value;
                    this.RaisePropertyChanged("Datek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Id>k__BackingField", IsRequired=true)]
        public int Idk__BackingField {
            get {
                return this.Idk__BackingFieldField;
            }
            set {
                if ((this.Idk__BackingFieldField.Equals(value) != true)) {
                    this.Idk__BackingFieldField = value;
                    this.RaisePropertyChanged("Idk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<UserId>k__BackingField", IsRequired=true)]
        public int UserIdk__BackingField {
            get {
                return this.UserIdk__BackingFieldField;
            }
            set {
                if ((this.UserIdk__BackingFieldField.Equals(value) != true)) {
                    this.UserIdk__BackingFieldField = value;
                    this.RaisePropertyChanged("UserIdk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<UserName>k__BackingField", IsRequired=true)]
        public string UserNamek__BackingField {
            get {
                return this.UserNamek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNamek__BackingFieldField, value) != true)) {
                    this.UserNamek__BackingFieldField = value;
                    this.RaisePropertyChanged("UserNamek__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Action", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    public enum Action : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Create = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Buy = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Edit = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Remove = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Address", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Address : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string Cityk__BackingFieldField;
        
        private string Floork__BackingFieldField;
        
        private int Idk__BackingFieldField;
        
        private string Numberk__BackingFieldField;
        
        private string Regionk__BackingFieldField;
        
        private string Streetk__BackingFieldField;
        
        private string Zipk__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<City>k__BackingField", IsRequired=true)]
        public string Cityk__BackingField {
            get {
                return this.Cityk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Cityk__BackingFieldField, value) != true)) {
                    this.Cityk__BackingFieldField = value;
                    this.RaisePropertyChanged("Cityk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Floor>k__BackingField", IsRequired=true)]
        public string Floork__BackingField {
            get {
                return this.Floork__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Floork__BackingFieldField, value) != true)) {
                    this.Floork__BackingFieldField = value;
                    this.RaisePropertyChanged("Floork__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Id>k__BackingField", IsRequired=true)]
        public int Idk__BackingField {
            get {
                return this.Idk__BackingFieldField;
            }
            set {
                if ((this.Idk__BackingFieldField.Equals(value) != true)) {
                    this.Idk__BackingFieldField = value;
                    this.RaisePropertyChanged("Idk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Number>k__BackingField", IsRequired=true)]
        public string Numberk__BackingField {
            get {
                return this.Numberk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Numberk__BackingFieldField, value) != true)) {
                    this.Numberk__BackingFieldField = value;
                    this.RaisePropertyChanged("Numberk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Region>k__BackingField", IsRequired=true)]
        public string Regionk__BackingField {
            get {
                return this.Regionk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Regionk__BackingFieldField, value) != true)) {
                    this.Regionk__BackingFieldField = value;
                    this.RaisePropertyChanged("Regionk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Street>k__BackingField", IsRequired=true)]
        public string Streetk__BackingField {
            get {
                return this.Streetk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Streetk__BackingFieldField, value) != true)) {
                    this.Streetk__BackingFieldField = value;
                    this.RaisePropertyChanged("Streetk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Zip>k__BackingField", IsRequired=true)]
        public string Zipk__BackingField {
            get {
                return this.Zipk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Zipk__BackingFieldField, value) != true)) {
                    this.Zipk__BackingFieldField = value;
                    this.RaisePropertyChanged("Zipk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Invite", Namespace="http://schemas.datacontract.org/2004/07/Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Invite : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AcceptedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WPF_SmartList.ListService.ShoppingList ListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ListIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReceiverIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReceiverMailField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Accepted {
            get {
                return this.AcceptedField;
            }
            set {
                if ((this.AcceptedField.Equals(value) != true)) {
                    this.AcceptedField = value;
                    this.RaisePropertyChanged("Accepted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WPF_SmartList.ListService.ShoppingList List {
            get {
                return this.ListField;
            }
            set {
                if ((object.ReferenceEquals(this.ListField, value) != true)) {
                    this.ListField = value;
                    this.RaisePropertyChanged("List");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ListId {
            get {
                return this.ListIdField;
            }
            set {
                if ((this.ListIdField.Equals(value) != true)) {
                    this.ListIdField = value;
                    this.RaisePropertyChanged("ListId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReceiverId {
            get {
                return this.ReceiverIdField;
            }
            set {
                if ((this.ReceiverIdField.Equals(value) != true)) {
                    this.ReceiverIdField = value;
                    this.RaisePropertyChanged("ReceiverId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReceiverMail {
            get {
                return this.ReceiverMailField;
            }
            set {
                if ((object.ReferenceEquals(this.ReceiverMailField, value) != true)) {
                    this.ReceiverMailField = value;
                    this.RaisePropertyChanged("ReceiverMail");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserList", Namespace="http://schemas.datacontract.org/2004/07/Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class UserList : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WPF_SmartList.ListService.ShoppingList ShoppingListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ShoppingListIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WPF_SmartList.ListService.User UserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WPF_SmartList.ListService.ShoppingList ShoppingList {
            get {
                return this.ShoppingListField;
            }
            set {
                if ((object.ReferenceEquals(this.ShoppingListField, value) != true)) {
                    this.ShoppingListField = value;
                    this.RaisePropertyChanged("ShoppingList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ShoppingListId {
            get {
                return this.ShoppingListIdField;
            }
            set {
                if ((this.ShoppingListIdField.Equals(value) != true)) {
                    this.ShoppingListIdField = value;
                    this.RaisePropertyChanged("ShoppingListId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WPF_SmartList.ListService.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ShoppingList", Namespace="http://schemas.datacontract.org/2004/07/Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class ShoppingList : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<WPF_SmartList.ListService.Item> ItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WPF_SmartList.ListService.User OwnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<WPF_SmartList.ListService.UserList> UsersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<WPF_SmartList.ListService.Item> Items {
            get {
                return this.ItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemsField, value) != true)) {
                    this.ItemsField = value;
                    this.RaisePropertyChanged("Items");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WPF_SmartList.ListService.User Owner {
            get {
                return this.OwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerField, value) != true)) {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<WPF_SmartList.ListService.UserList> Users {
            get {
                return this.UsersField;
            }
            set {
                if ((object.ReferenceEquals(this.UsersField, value) != true)) {
                    this.UsersField = value;
                    this.RaisePropertyChanged("Users");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatsController.LightCategoryData", Namespace="http://schemas.datacontract.org/2004/07/Controller")]
    [System.SerializableAttribute()]
    public partial struct StatsControllerLightCategoryData : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CatIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CatId {
            get {
                return this.CatIdField;
            }
            set {
                if ((this.CatIdField.Equals(value) != true)) {
                    this.CatIdField = value;
                    this.RaisePropertyChanged("CatId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatsController.GeneralStats", Namespace="http://schemas.datacontract.org/2004/07/Controller")]
    [System.SerializableAttribute()]
    public partial struct StatsControllerGeneralStats : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalItemCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalListCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalUserCountField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalItemCount {
            get {
                return this.TotalItemCountField;
            }
            set {
                if ((this.TotalItemCountField.Equals(value) != true)) {
                    this.TotalItemCountField = value;
                    this.RaisePropertyChanged("TotalItemCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalListCount {
            get {
                return this.TotalListCountField;
            }
            set {
                if ((this.TotalListCountField.Equals(value) != true)) {
                    this.TotalListCountField = value;
                    this.RaisePropertyChanged("TotalListCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalUserCount {
            get {
                return this.TotalUserCountField;
            }
            set {
                if ((this.TotalUserCountField.Equals(value) != true)) {
                    this.TotalUserCountField = value;
                    this.RaisePropertyChanged("TotalUserCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatsController.LightListData", Namespace="http://schemas.datacontract.org/2004/07/Controller")]
    [System.SerializableAttribute()]
    public partial struct StatsControllerLightListData : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ItemCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ListIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ItemCount {
            get {
                return this.ItemCountField;
            }
            set {
                if ((this.ItemCountField.Equals(value) != true)) {
                    this.ItemCountField = value;
                    this.RaisePropertyChanged("ItemCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ListId {
            get {
                return this.ListIdField;
            }
            set {
                if ((this.ListIdField.Equals(value) != true)) {
                    this.ListIdField = value;
                    this.RaisePropertyChanged("ListId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ListService.IListService")]
    public interface IListService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/AcceptInvite", ReplyAction="http://tempuri.org/IListService/AcceptInviteResponse")]
        bool AcceptInvite(string token, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/AcceptInvite", ReplyAction="http://tempuri.org/IListService/AcceptInviteResponse")]
        System.Threading.Tasks.Task<bool> AcceptInviteAsync(string token, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/AddCategory", ReplyAction="http://tempuri.org/IListService/AddCategoryResponse")]
        bool AddCategory(string token, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/AddCategory", ReplyAction="http://tempuri.org/IListService/AddCategoryResponse")]
        System.Threading.Tasks.Task<bool> AddCategoryAsync(string token, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/AddItem", ReplyAction="http://tempuri.org/IListService/AddItemResponse")]
        bool AddItem(string token, int listId, string name, double amount, int unitId, int categoryId, System.Nullable<System.DateTime> deadline);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/AddItem", ReplyAction="http://tempuri.org/IListService/AddItemResponse")]
        System.Threading.Tasks.Task<bool> AddItemAsync(string token, int listId, string name, double amount, int unitId, int categoryId, System.Nullable<System.DateTime> deadline);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/AddShoppingList", ReplyAction="http://tempuri.org/IListService/AddShoppingListResponse")]
        bool AddShoppingList(string token, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/AddShoppingList", ReplyAction="http://tempuri.org/IListService/AddShoppingListResponse")]
        System.Threading.Tasks.Task<bool> AddShoppingListAsync(string token, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/EditItemName", ReplyAction="http://tempuri.org/IListService/EditItemNameResponse")]
        bool EditItemName(string token, int itemId, int listId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/EditItemName", ReplyAction="http://tempuri.org/IListService/EditItemNameResponse")]
        System.Threading.Tasks.Task<bool> EditItemNameAsync(string token, int itemId, int listId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/EditItemCategory", ReplyAction="http://tempuri.org/IListService/EditItemCategoryResponse")]
        bool EditItemCategory(string token, int itemId, int listId, int catId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/EditItemCategory", ReplyAction="http://tempuri.org/IListService/EditItemCategoryResponse")]
        System.Threading.Tasks.Task<bool> EditItemCategoryAsync(string token, int itemId, int listId, int catId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/EditItemUnit", ReplyAction="http://tempuri.org/IListService/EditItemUnitResponse")]
        bool EditItemUnit(string token, int itemId, int listId, int unitId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/EditItemUnit", ReplyAction="http://tempuri.org/IListService/EditItemUnitResponse")]
        System.Threading.Tasks.Task<bool> EditItemUnitAsync(string token, int itemId, int listId, int unitId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/EditItemAmount", ReplyAction="http://tempuri.org/IListService/EditItemAmountResponse")]
        bool EditItemAmount(string token, int itemId, int listId, double newAmount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/EditItemAmount", ReplyAction="http://tempuri.org/IListService/EditItemAmountResponse")]
        System.Threading.Tasks.Task<bool> EditItemAmountAsync(string token, int itemId, int listId, double newAmount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetCategories", ReplyAction="http://tempuri.org/IListService/GetCategoriesResponse")]
        System.Collections.Generic.List<WPF_SmartList.ListService.Category> GetCategories(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetCategories", ReplyAction="http://tempuri.org/IListService/GetCategoriesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WPF_SmartList.ListService.Category>> GetCategoriesAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetDefaultCategories", ReplyAction="http://tempuri.org/IListService/GetDefaultCategoriesResponse")]
        System.Collections.Generic.List<WPF_SmartList.ListService.Category> GetDefaultCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetDefaultCategories", ReplyAction="http://tempuri.org/IListService/GetDefaultCategoriesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WPF_SmartList.ListService.Category>> GetDefaultCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetDefaultUnits", ReplyAction="http://tempuri.org/IListService/GetDefaultUnitsResponse")]
        System.Collections.Generic.List<WPF_SmartList.ListService.Unit> GetDefaultUnits();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetDefaultUnits", ReplyAction="http://tempuri.org/IListService/GetDefaultUnitsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WPF_SmartList.ListService.Unit>> GetDefaultUnitsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetMostUsedCategory", ReplyAction="http://tempuri.org/IListService/GetMostUsedCategoryResponse")]
        WPF_SmartList.ListService.Category GetMostUsedCategory(string token, string itemName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetMostUsedCategory", ReplyAction="http://tempuri.org/IListService/GetMostUsedCategoryResponse")]
        System.Threading.Tasks.Task<WPF_SmartList.ListService.Category> GetMostUsedCategoryAsync(string token, string itemName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetMostUsedCategories", ReplyAction="http://tempuri.org/IListService/GetMostUsedCategoriesResponse")]
        System.Collections.Generic.List<WPF_SmartList.ListService.StatsControllerLightCategoryData> GetMostUsedCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetMostUsedCategories", ReplyAction="http://tempuri.org/IListService/GetMostUsedCategoriesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WPF_SmartList.ListService.StatsControllerLightCategoryData>> GetMostUsedCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetReceivedInvites", ReplyAction="http://tempuri.org/IListService/GetReceivedInvitesResponse")]
        System.Collections.Generic.List<WPF_SmartList.ListService.Invite> GetReceivedInvites(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetReceivedInvites", ReplyAction="http://tempuri.org/IListService/GetReceivedInvitesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WPF_SmartList.ListService.Invite>> GetReceivedInvitesAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetSentInvites", ReplyAction="http://tempuri.org/IListService/GetSentInvitesResponse")]
        System.Collections.Generic.List<WPF_SmartList.ListService.Invite> GetSentInvites(string token, int listId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetSentInvites", ReplyAction="http://tempuri.org/IListService/GetSentInvitesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WPF_SmartList.ListService.Invite>> GetSentInvitesAsync(string token, int listId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetShoppingList", ReplyAction="http://tempuri.org/IListService/GetShoppingListResponse")]
        WPF_SmartList.ListService.ShoppingList GetShoppingList(string token, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetShoppingList", ReplyAction="http://tempuri.org/IListService/GetShoppingListResponse")]
        System.Threading.Tasks.Task<WPF_SmartList.ListService.ShoppingList> GetShoppingListAsync(string token, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetShoppingLists", ReplyAction="http://tempuri.org/IListService/GetShoppingListsResponse")]
        System.Collections.Generic.List<WPF_SmartList.ListService.ShoppingList> GetShoppingLists(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetShoppingLists", ReplyAction="http://tempuri.org/IListService/GetShoppingListsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WPF_SmartList.ListService.ShoppingList>> GetShoppingListsAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/RejectInvite", ReplyAction="http://tempuri.org/IListService/RejectInviteResponse")]
        bool RejectInvite(string token, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/RejectInvite", ReplyAction="http://tempuri.org/IListService/RejectInviteResponse")]
        System.Threading.Tasks.Task<bool> RejectInviteAsync(string token, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/RemoveCategory", ReplyAction="http://tempuri.org/IListService/RemoveCategoryResponse")]
        bool RemoveCategory(string token, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/RemoveCategory", ReplyAction="http://tempuri.org/IListService/RemoveCategoryResponse")]
        System.Threading.Tasks.Task<bool> RemoveCategoryAsync(string token, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/RemoveShoppingList", ReplyAction="http://tempuri.org/IListService/RemoveShoppingListResponse")]
        bool RemoveShoppingList(string token, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/RemoveShoppingList", ReplyAction="http://tempuri.org/IListService/RemoveShoppingListResponse")]
        System.Threading.Tasks.Task<bool> RemoveShoppingListAsync(string token, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/RevokeInvite", ReplyAction="http://tempuri.org/IListService/RevokeInviteResponse")]
        bool RevokeInvite(string token, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/RevokeInvite", ReplyAction="http://tempuri.org/IListService/RevokeInviteResponse")]
        System.Threading.Tasks.Task<bool> RevokeInviteAsync(string token, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/SendInvite", ReplyAction="http://tempuri.org/IListService/SendInviteResponse")]
        bool SendInvite(string token, string toEmail, int listId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/SendInvite", ReplyAction="http://tempuri.org/IListService/SendInviteResponse")]
        System.Threading.Tasks.Task<bool> SendInviteAsync(string token, string toEmail, int listId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/AddDeadlineToItem", ReplyAction="http://tempuri.org/IListService/AddDeadlineToItemResponse")]
        bool AddDeadlineToItem(string userToken, int itemId, System.DateTime deadline, int listId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/AddDeadlineToItem", ReplyAction="http://tempuri.org/IListService/AddDeadlineToItemResponse")]
        System.Threading.Tasks.Task<bool> AddDeadlineToItemAsync(string userToken, int itemId, System.DateTime deadline, int listId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetUnits", ReplyAction="http://tempuri.org/IListService/GetUnitsResponse")]
        System.Collections.Generic.List<WPF_SmartList.ListService.Unit> GetUnits();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetUnits", ReplyAction="http://tempuri.org/IListService/GetUnitsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WPF_SmartList.ListService.Unit>> GetUnitsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetMostUsedUnit", ReplyAction="http://tempuri.org/IListService/GetMostUsedUnitResponse")]
        WPF_SmartList.ListService.Unit GetMostUsedUnit(string itemName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetMostUsedUnit", ReplyAction="http://tempuri.org/IListService/GetMostUsedUnitResponse")]
        System.Threading.Tasks.Task<WPF_SmartList.ListService.Unit> GetMostUsedUnitAsync(string itemName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/BuyItem", ReplyAction="http://tempuri.org/IListService/BuyItemResponse")]
        bool BuyItem(string userToken, int itemId, int listId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/BuyItem", ReplyAction="http://tempuri.org/IListService/BuyItemResponse")]
        System.Threading.Tasks.Task<bool> BuyItemAsync(string userToken, int itemId, int listId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/RemoveItem", ReplyAction="http://tempuri.org/IListService/RemoveItemResponse")]
        bool RemoveItem(string userToken, int itemId, int listId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/RemoveItem", ReplyAction="http://tempuri.org/IListService/RemoveItemResponse")]
        System.Threading.Tasks.Task<bool> RemoveItemAsync(string userToken, int itemId, int listId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetMostRecentAction", ReplyAction="http://tempuri.org/IListService/GetMostRecentActionResponse")]
        WPF_SmartList.ListService.ItemChange GetMostRecentAction(int itemId, string accessToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetMostRecentAction", ReplyAction="http://tempuri.org/IListService/GetMostRecentActionResponse")]
        System.Threading.Tasks.Task<WPF_SmartList.ListService.ItemChange> GetMostRecentActionAsync(int itemId, string accessToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetGeneralStats", ReplyAction="http://tempuri.org/IListService/GetGeneralStatsResponse")]
        WPF_SmartList.ListService.StatsControllerGeneralStats GetGeneralStats(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetGeneralStats", ReplyAction="http://tempuri.org/IListService/GetGeneralStatsResponse")]
        System.Threading.Tasks.Task<WPF_SmartList.ListService.StatsControllerGeneralStats> GetGeneralStatsAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetLists", ReplyAction="http://tempuri.org/IListService/GetListsResponse")]
        System.Collections.Generic.List<WPF_SmartList.ListService.StatsControllerLightListData> GetLists();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IListService/GetLists", ReplyAction="http://tempuri.org/IListService/GetListsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WPF_SmartList.ListService.StatsControllerLightListData>> GetListsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IListServiceChannel : WPF_SmartList.ListService.IListService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ListServiceClient : System.ServiceModel.ClientBase<WPF_SmartList.ListService.IListService>, WPF_SmartList.ListService.IListService {
        
        public ListServiceClient() {
        }
        
        public ListServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ListServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ListServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ListServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AcceptInvite(string token, int id) {
            return base.Channel.AcceptInvite(token, id);
        }
        
        public System.Threading.Tasks.Task<bool> AcceptInviteAsync(string token, int id) {
            return base.Channel.AcceptInviteAsync(token, id);
        }
        
        public bool AddCategory(string token, string name) {
            return base.Channel.AddCategory(token, name);
        }
        
        public System.Threading.Tasks.Task<bool> AddCategoryAsync(string token, string name) {
            return base.Channel.AddCategoryAsync(token, name);
        }
        
        public bool AddItem(string token, int listId, string name, double amount, int unitId, int categoryId, System.Nullable<System.DateTime> deadline) {
            return base.Channel.AddItem(token, listId, name, amount, unitId, categoryId, deadline);
        }
        
        public System.Threading.Tasks.Task<bool> AddItemAsync(string token, int listId, string name, double amount, int unitId, int categoryId, System.Nullable<System.DateTime> deadline) {
            return base.Channel.AddItemAsync(token, listId, name, amount, unitId, categoryId, deadline);
        }
        
        public bool AddShoppingList(string token, string name) {
            return base.Channel.AddShoppingList(token, name);
        }
        
        public System.Threading.Tasks.Task<bool> AddShoppingListAsync(string token, string name) {
            return base.Channel.AddShoppingListAsync(token, name);
        }
        
        public bool EditItemName(string token, int itemId, int listId, string name) {
            return base.Channel.EditItemName(token, itemId, listId, name);
        }
        
        public System.Threading.Tasks.Task<bool> EditItemNameAsync(string token, int itemId, int listId, string name) {
            return base.Channel.EditItemNameAsync(token, itemId, listId, name);
        }
        
        public bool EditItemCategory(string token, int itemId, int listId, int catId) {
            return base.Channel.EditItemCategory(token, itemId, listId, catId);
        }
        
        public System.Threading.Tasks.Task<bool> EditItemCategoryAsync(string token, int itemId, int listId, int catId) {
            return base.Channel.EditItemCategoryAsync(token, itemId, listId, catId);
        }
        
        public bool EditItemUnit(string token, int itemId, int listId, int unitId) {
            return base.Channel.EditItemUnit(token, itemId, listId, unitId);
        }
        
        public System.Threading.Tasks.Task<bool> EditItemUnitAsync(string token, int itemId, int listId, int unitId) {
            return base.Channel.EditItemUnitAsync(token, itemId, listId, unitId);
        }
        
        public bool EditItemAmount(string token, int itemId, int listId, double newAmount) {
            return base.Channel.EditItemAmount(token, itemId, listId, newAmount);
        }
        
        public System.Threading.Tasks.Task<bool> EditItemAmountAsync(string token, int itemId, int listId, double newAmount) {
            return base.Channel.EditItemAmountAsync(token, itemId, listId, newAmount);
        }
        
        public System.Collections.Generic.List<WPF_SmartList.ListService.Category> GetCategories(string token) {
            return base.Channel.GetCategories(token);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WPF_SmartList.ListService.Category>> GetCategoriesAsync(string token) {
            return base.Channel.GetCategoriesAsync(token);
        }
        
        public System.Collections.Generic.List<WPF_SmartList.ListService.Category> GetDefaultCategories() {
            return base.Channel.GetDefaultCategories();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WPF_SmartList.ListService.Category>> GetDefaultCategoriesAsync() {
            return base.Channel.GetDefaultCategoriesAsync();
        }
        
        public System.Collections.Generic.List<WPF_SmartList.ListService.Unit> GetDefaultUnits() {
            return base.Channel.GetDefaultUnits();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WPF_SmartList.ListService.Unit>> GetDefaultUnitsAsync() {
            return base.Channel.GetDefaultUnitsAsync();
        }
        
        public WPF_SmartList.ListService.Category GetMostUsedCategory(string token, string itemName) {
            return base.Channel.GetMostUsedCategory(token, itemName);
        }
        
        public System.Threading.Tasks.Task<WPF_SmartList.ListService.Category> GetMostUsedCategoryAsync(string token, string itemName) {
            return base.Channel.GetMostUsedCategoryAsync(token, itemName);
        }
        
        public System.Collections.Generic.List<WPF_SmartList.ListService.StatsControllerLightCategoryData> GetMostUsedCategories() {
            return base.Channel.GetMostUsedCategories();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WPF_SmartList.ListService.StatsControllerLightCategoryData>> GetMostUsedCategoriesAsync() {
            return base.Channel.GetMostUsedCategoriesAsync();
        }
        
        public System.Collections.Generic.List<WPF_SmartList.ListService.Invite> GetReceivedInvites(string token) {
            return base.Channel.GetReceivedInvites(token);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WPF_SmartList.ListService.Invite>> GetReceivedInvitesAsync(string token) {
            return base.Channel.GetReceivedInvitesAsync(token);
        }
        
        public System.Collections.Generic.List<WPF_SmartList.ListService.Invite> GetSentInvites(string token, int listId) {
            return base.Channel.GetSentInvites(token, listId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WPF_SmartList.ListService.Invite>> GetSentInvitesAsync(string token, int listId) {
            return base.Channel.GetSentInvitesAsync(token, listId);
        }
        
        public WPF_SmartList.ListService.ShoppingList GetShoppingList(string token, int id) {
            return base.Channel.GetShoppingList(token, id);
        }
        
        public System.Threading.Tasks.Task<WPF_SmartList.ListService.ShoppingList> GetShoppingListAsync(string token, int id) {
            return base.Channel.GetShoppingListAsync(token, id);
        }
        
        public System.Collections.Generic.List<WPF_SmartList.ListService.ShoppingList> GetShoppingLists(string token) {
            return base.Channel.GetShoppingLists(token);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WPF_SmartList.ListService.ShoppingList>> GetShoppingListsAsync(string token) {
            return base.Channel.GetShoppingListsAsync(token);
        }
        
        public bool RejectInvite(string token, int id) {
            return base.Channel.RejectInvite(token, id);
        }
        
        public System.Threading.Tasks.Task<bool> RejectInviteAsync(string token, int id) {
            return base.Channel.RejectInviteAsync(token, id);
        }
        
        public bool RemoveCategory(string token, int id) {
            return base.Channel.RemoveCategory(token, id);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveCategoryAsync(string token, int id) {
            return base.Channel.RemoveCategoryAsync(token, id);
        }
        
        public bool RemoveShoppingList(string token, int id) {
            return base.Channel.RemoveShoppingList(token, id);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveShoppingListAsync(string token, int id) {
            return base.Channel.RemoveShoppingListAsync(token, id);
        }
        
        public bool RevokeInvite(string token, int id) {
            return base.Channel.RevokeInvite(token, id);
        }
        
        public System.Threading.Tasks.Task<bool> RevokeInviteAsync(string token, int id) {
            return base.Channel.RevokeInviteAsync(token, id);
        }
        
        public bool SendInvite(string token, string toEmail, int listId) {
            return base.Channel.SendInvite(token, toEmail, listId);
        }
        
        public System.Threading.Tasks.Task<bool> SendInviteAsync(string token, string toEmail, int listId) {
            return base.Channel.SendInviteAsync(token, toEmail, listId);
        }
        
        public bool AddDeadlineToItem(string userToken, int itemId, System.DateTime deadline, int listId) {
            return base.Channel.AddDeadlineToItem(userToken, itemId, deadline, listId);
        }
        
        public System.Threading.Tasks.Task<bool> AddDeadlineToItemAsync(string userToken, int itemId, System.DateTime deadline, int listId) {
            return base.Channel.AddDeadlineToItemAsync(userToken, itemId, deadline, listId);
        }
        
        public System.Collections.Generic.List<WPF_SmartList.ListService.Unit> GetUnits() {
            return base.Channel.GetUnits();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WPF_SmartList.ListService.Unit>> GetUnitsAsync() {
            return base.Channel.GetUnitsAsync();
        }
        
        public WPF_SmartList.ListService.Unit GetMostUsedUnit(string itemName) {
            return base.Channel.GetMostUsedUnit(itemName);
        }
        
        public System.Threading.Tasks.Task<WPF_SmartList.ListService.Unit> GetMostUsedUnitAsync(string itemName) {
            return base.Channel.GetMostUsedUnitAsync(itemName);
        }
        
        public bool BuyItem(string userToken, int itemId, int listId) {
            return base.Channel.BuyItem(userToken, itemId, listId);
        }
        
        public System.Threading.Tasks.Task<bool> BuyItemAsync(string userToken, int itemId, int listId) {
            return base.Channel.BuyItemAsync(userToken, itemId, listId);
        }
        
        public bool RemoveItem(string userToken, int itemId, int listId) {
            return base.Channel.RemoveItem(userToken, itemId, listId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveItemAsync(string userToken, int itemId, int listId) {
            return base.Channel.RemoveItemAsync(userToken, itemId, listId);
        }
        
        public WPF_SmartList.ListService.ItemChange GetMostRecentAction(int itemId, string accessToken) {
            return base.Channel.GetMostRecentAction(itemId, accessToken);
        }
        
        public System.Threading.Tasks.Task<WPF_SmartList.ListService.ItemChange> GetMostRecentActionAsync(int itemId, string accessToken) {
            return base.Channel.GetMostRecentActionAsync(itemId, accessToken);
        }
        
        public WPF_SmartList.ListService.StatsControllerGeneralStats GetGeneralStats(string token) {
            return base.Channel.GetGeneralStats(token);
        }
        
        public System.Threading.Tasks.Task<WPF_SmartList.ListService.StatsControllerGeneralStats> GetGeneralStatsAsync(string token) {
            return base.Channel.GetGeneralStatsAsync(token);
        }
        
        public System.Collections.Generic.List<WPF_SmartList.ListService.StatsControllerLightListData> GetLists() {
            return base.Channel.GetLists();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WPF_SmartList.ListService.StatsControllerLightListData>> GetListsAsync() {
            return base.Channel.GetListsAsync();
        }
    }
}
